-- MySQL Script generated by MySQL Workbench
-- Thu Aug  1 17:40:31 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema lbrpdb
-- -----------------------------------------------------
-- user database for MQTT client + brooker for lbrp 

-- -----------------------------------------------------
-- Schema lbrpdb
--
-- user database for MQTT client + brooker for lbrp 
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `lbrpdb` ;
USE `lbrpdb` ;

-- -----------------------------------------------------
-- Table `lbrpdb`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lbrpdb`.`user` (
  `iduser` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`iduser`),
  UNIQUE INDEX `iduser_UNIQUE` (`iduser` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `lbrpdb`.`geodata`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lbrpdb`.`geodata` (
  `idgeo` INT NOT NULL AUTO_INCREMENT,
  `latitude` FLOAT NULL DEFAULT NULL,
  `longitude` FLOAT NULL DEFAULT NULL,
  `time` VARCHAR(45) NULL DEFAULT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`idgeo`),
  UNIQUE INDEX `idgeo_UNIQUE` (`idgeo` ASC) VISIBLE,
  INDEX `fk_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `lbrpdb`.`user` (`iduser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `lbrpdb` ;

-- -----------------------------------------------------
-- Placeholder table for view `lbrpdb`.`user_relationship_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lbrpdb`.`user_relationship_view` (`user_id1` INT, `user_id2` INT, `distance` INT, `time_difference` INT);

-- -----------------------------------------------------
-- function haversine_distance
-- -----------------------------------------------------

DELIMITER $$
USE `lbrpdb`$$
CREATE FUNCTION haversine_distance(lat1 DECIMAL(9,6), lon1 DECIMAL(9,6), lat2 DECIMAL(9,6), lon2 DECIMAL(9,6))
RETURNS DECIMAL(10,6)
BEGIN
    DECLARE R INT DEFAULT 6371; -- Radius of the Earth in kilometers
    DECLARE dLat DECIMAL(9,6);
    DECLARE dLon DECIMAL(9,6);
    DECLARE a DECIMAL(10,6);
    DECLARE c DECIMAL(10,6);
    DECLARE d DECIMAL(10,6);

    SET dLat = RADIANS(lat2 - lat1);
    SET dLon = RADIANS(lon2 - lon1);
    SET lat1 = RADIANS(lat1);
    SET lat2 = RADIANS(lat2);

    SET a = SIN(dLat / 2) * SIN(dLat / 2) + COS(lat1) * COS(lat2) * SIN(dLon / 2) * SIN(dLon / 2);
    SET c = 2 * ATAN2(SQRT(a), SQRT(1 - a));
    SET d = R * c;

    RETURN d;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `lbrpdb`.`user_relationship_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lbrpdb`.`user_relationship_view`;
USE `lbrpdb`;
CREATE  OR REPLACE VIEW user_relationship_view AS
SELECT 
    u1.iduser AS user_id1,
    u2.iduser AS user_id2,
    haversine_distance(g1.latitude, g1.longitude, g2.latitude, g2.longitude) AS distance,
    ABS(TIMESTAMPDIFF(SECOND, STR_TO_DATE(g1.time, '%Y-%m-%d %H:%i:%s'), STR_TO_DATE(g2.time, '%Y-%m-%d %H:%i:%s'))) AS time_difference
FROM 
    geodata g1
JOIN 
    geodata g2 ON g1.idgeo < g2.idgeo
JOIN 
    user u1 ON g1.user_id = u1.iduser
JOIN 
    user u2 ON g2.user_id = u2.iduser
WHERE 
    haversine_distance(g1.latitude, g1.longitude, g2.latitude, g2.longitude) <= 0.15 -- Distance threshold in kilometers
    AND ABS(TIMESTAMPDIFF(SECOND, STR_TO_DATE(g1.time, '%Y-%m-%d %H:%i:%s'), STR_TO_DATE(g2.time, '%Y-%m-%d %H:%i:%s'))) <= 600;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
